#summary Задачки для второкурсников.

<font color=red>Данная страничка НЕ относится к техкурсу.</font><br>Просто в силу разных причин сейчас здесь мне удобнее всего разместить эти условия.

= Доп. задачи =
У всех программ должен быть удобный интерфейс командной строки.

==1. UDP file server==
Передача файлов большого размера (около 2 GB).
Поддерживать:
  * Потери и re-order пакетов в сети
  * Возможность продложить скачивание после длительного разрыва связи и/или отключение клиента/сервера
  * Файл на клиенте не должен занимать больше места, чем оригинал на сервере
  * Правильная обработка ситуации "на сервере файл поменяли"
_Подсказка: использовать checksum'ы_ 

==2. Скачивалка больших файлов по HTTP ==
(аналог [http://en.wikipedia.org/wiki/Flashget FlashGet])
Интерфейс:
{{{
$ ./download http://mysite/myfile [localfilename]  # по умолчанию localfilename=myfile
}}}
Поддерживать:
  * Возможность продложить скачивание после длительного разрыва связи и/или отключение клиента/сервера
  * В скачиваемом файле *можно* хранить доп. информацию
Указание:
Почитать протокол HTTP, в частности `Accept-Ranges:`

==3, HTTP web server==
Интерфейс:
{{{
$ ./webserver [port] [dir]  # по умолчанию port=8080, dir=.
}}}
-> Запускает вебсервер на порту `port`, который позволяет ходить по указанной папке, её подпапкам и файлам из браузера. 
Поддерживать:
  * `http://server:port/` должно показывать содержание папки dir (генерировать HTML страничку со ссылками)
  *  `http://server:port/dirx` - показать содержимое папки dir/dirx, `http://server:port/file.txt` - скачивать файл file.txt и т.д. для подпапок и файлов в подпапках.
  * Поддерживать коды ошибок 200, 403, 404; запрещать доступ к данным выше dir по дереву папок
  * Выдавать правильные mime-типы хотя бы для некоторого набора файлов (по расширению)

==4. Распределенная сортировка с помощью merge-sort==
*TODO*: описание

==5. Веб-чат==
*TODO*: описание
Особенность: использовать потоки с общей памятью