#summary Как можно работать с ветками (branches) кода

= Предисловие =
На данной странице примеры будут приводиться в виде команд SVN.
Предполагается, что структура папок выглядит примерно так:
{{{
Корень
 |-- trunk
 |- branches
 |    |-- branch_1
 |    |-- branch_2
 |    |-- branch_3
 |
 |- releases
      |-- 1.0
      |-- 1.1
      ...
      |-- 1.23
}}}

Вообще, работать с branch'ами в SVN менее удобно, чем в git, но на данной странице разобран пусть и более сложный и неудобный, но более распространённый инструмент.
Для пользователя git работа с ветками является гораздо более частым действием, поэтому предполагается что опытный пользователь сможет без труда применить в git аналоги нижеприведённых команд SVN.

Основные приводимые ниже идеи (что хранить в какой ветке, когда-что-куда переносить и т.д.) не зависят от используемой системы контроля версий.

= Подход "стабильный trunk" =
В `trunk` хранится только стабильный код - тщательно оттестированный, прошедший все возможные review и т.п.<br>

Для изменений кода: добавления новой функциональности, исправления ошибок - другими словами, решения задач, разработчики (или команды разработчиков) создают для каждой такой задачи отдельную ветку:
{{{
$ svn copy URL/trunk URL/branches/feature_X -m "Create a branch for a new feature X"
Committed revision BRANCH_POINT.
}}}
Вся работа над задачей теперь ведётся в папке `branches/new_feature`.
Для экономии дискового пространства разработчик (или команда) может вместо создания нового клиента переключить свои текущие клиенты на работу с веткой:
{{{
$ svn switch URL/branches/feature_X
}}}

Если во время решения задачи в `trunk` попал некоторый код, который хотелось бы использовать (например, другая команда исправила ошибку), то код в ветке можно обновить до новой версии `trunk`:
{{{
# Выполнять из папки, синхронизованной с feature_X
$ svn merge -r BRANCH_POINT:HEAD URL/trunk
$ svn commit -m "Take the fresh trunk with a fix for bug 42"  # желательно указать ревизию trunk
}}}

Когда задача решена, ветка проходит review и объединяется с `trunk`:
{{{
$ svn switch URL/trunk
$ svn merge -r BRANCH_POINT:HEAD URL/branches/feature_X
$ svn commit -m "Add new feature X"
}}}
(В принципе, провежуточные результаты работы можно вливать в `trunk` таким же образом)

Теперь ветку можно удалить:
{{{
$ svn rm URL/branches/feature_X -m "The branch is no longer needed"
}}}

Общая схема выглядит примерно так:
{{{
trunk
 |
 X  # svn copy creates revision BRANCH_POINT
 |->feature_X
 |   |
 |   |
 |-->X  # update the branch to trunk via svn merge
 |   |
 |   |
 |-->X  # update the branch to trunk via svn merge
 |   |
 |   /
 X<==   # merge the branch to trunk and remove it
 |
 |
}}}

*TODO*: _обязательно ли запоминать BRANCH_POINT?_

Для выпуска очередной версии продукта пользователям достаточно взять текущую версию `trunk` и скомпилировать инсталлятор.
При этом удобно сделать копию `trunk` в подпапку `releases`, чтобы потом можно было легко посмотреть код выпущенного релиза:
{{{
$ svn copy URL/trunk URL/releases/1.23 -m "Tagging release 1.23. Let's go get some beer?"
}}}