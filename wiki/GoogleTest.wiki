#summary Как начать работу с системой тестирования googletest

Библиотека googletest доступна по адресу http://code.google.com/p/googletest

Здесь приводится лишь краткий список основных интересующих нас возможностей библиотеки.
Полную документацию можно найти по адресу http://code.google.com/p/googletest/wiki/Documentation

= Компиляция тестов =
== С использованием системного googletest ==
Проверим, установлен ли googletest:
{{{
$ ls /usr/lib/libgtest*.a /usr/include/gtest
/usr/lib/libgtest.a  /usr/lib/libgtest_main.a

/usr/include/gtest:
gtest-death-test.h  gtest.h  gtest-message.h  ...
}}}

Если результат предыдущей коменды был пустым, то можно установить так:
{{{
$ sudo apt-get install -y libgtest-dev libgtest0
}}}

Теперь напишем наш первый тест с использованием библиотеки googletest - 
`googletest_demo.cpp`: 
{{{
#include <gtest/gtest.h>

int sum(int a, int b) { return a + b; }  // the function we want to test

TEST(MyFunctionTests, Sum) {
  ASSERT_EQ(4 /* expected */, sum(2, 2) /* actual */);
}
}}}

Скомпилируем и запустим его следующими командами:
{{{
$ g++ -l gtest_main -o googletest_demo googletest_demo.cpp
$ ./googletest_demo 
Running main() from gtest_main.cc
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from MyFunctionTests
[ RUN      ] MyFunctionTests.Sum
[       OK ] MyFunctionTests.Sum
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
}}}

Обратите внимание на отсутствие в файле googletest_demo.cpp функции `main()` - она уже есть в библиотеке `gtest_main`. Если по какой-то причине нам нужно использовать собственную версию `main()`, то вместо "`-l gtest_main`" следует использовать "`-l gtest`", а `main()` следует написать так:
{{{
int main(int argc, char **argv) {
  // InitGoogleTest() reads googletest flags; may change argc and argv!
  ::testing::InitGoogleTest(&argc, argv);

  // do your stuff here

  return RUN_ALL_TESTS();
}
}}}

== Сборка библиотеки из исходных кодов ==
Простая версия:
{{{
# Выполнять в папке, где лежит googletest_demo.cpp
$ svn checkout http://googletest.googlecode.com/svn/trunk/ googletest
...
# Собрать сам gtest и стандартную функцию main()
$ g++ -I googletest -I googletest/include -c -o gtest.a googletest/src/gtest-all.cc
$ g++ -I googletest -I googletest/include -c -o gtest_main.a googletest/src/gtest_main.cc
# Собрать наши тесты
$ g++ -I googletest/include -c -o googletest_demo.a googletest_demo.cpp
# Компоновка и запуск
$ g++ -o googletest_demo gtest.a gtest_main.a googletest_demo.a
$ ./googletest_demo 
Running main() from gtest_main.cc
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from MyFunctionTests
[ RUN      ] MyFunctionTests.Sum
[       OK ] MyFunctionTests.Sum (0 ms)
[----------] 1 test from MyFunctionTests (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1 ms total)
[  PASSED  ] 1 test.
}}}

Более сложные варианты интеграции с системами сборки описаны в [http://code.google.com/p/googletest/wiki/Primer#Setting_up_a_New_Test_Project в официальной документации],<br>а также в исходных кодах ([http://code.google.com/p/googletest/source/browse/#svn%2Ftrunk%2Fmake Makefile], [http://code.google.com/p/googletest/source/browse/#svn%2Ftrunk%2Fcmake CMake], [http://code.google.com/p/googletest/source/browse/#svn%2Ftrunk%2Fmsvc Visual Studio], [http://code.google.com/p/googletest/wiki/XcodeGuide XCode]).

= Основные приемы работы =
== Семейства макросов ASSERT_XY, EXPECT_XY ==
( http://code.google.com/p/googletest/wiki/Primer#Assertions )

Макросы `ASSERT_XY` и `EXPECT_XY` проверяют выполнение некоторых условий.

В случае невыполнения условия макроса ASSERT_XY тест прекращается и начинает выполняться следующий тест:
{{{
TEST(MyFunctionTests, Sum) {
  ASSERT_EQ(5 /* expected */, sum(2, 2) /* actual */);
  printf("Won't be executed\n");
}
--->
[ RUN      ] MyFunctionTests.Sum
demo.cpp:6: Failure
Value of: sum(2, 2)
  Actual: 4
Expected: 5
[  FAILED  ] MyFunctionTests.Sum
}}}

В случае невыполнения условия макроса EXPECT_XY тест продолажет выполняться, но в конце все равно будет считаться FAILED:
{{{
TEST(MyFunctionTests, Sum) {
  EXPECT_EQ(5 /* expected */, sum(2, 2) /* actual */);
  printf("This will be executed after EXPECT_EQ\n");
}
--->
[ RUN      ] MyFunctionTests.Sum
demo.cpp:6: Failure
Value of: sum(2, 2)
  Actual: 4
Expected: 5
This will be executed after EXPECT_EQ
[  FAILED  ] MyFunctionTests.Sum
}}}


Основные макросы: (для каждого `ASSERT_XY` есть соответствующий `EXPECT_XY`)
  * `ASSERT_TRUE`, `..._FALSE` и т.п. - проверяют true/false
  * `ASSERT_EQ(expected, actual)` - проверить, что второй аргумент равен ожидаемому значению (первый аргумент).
  * `ASSERT_NE(val1, val2);` --> проверяет неравенство аргументов,<br>`..._LT` (<),<br>`..._LE` (<=),<br>`..._GT` (>),<br>`..._GE` (>=)
  * `ASSERT_STREQ(expected_str, actual_str);`, `..._STRNE`, `..._STRCASEEQ`, `..._STRCASENE`
  * Другие, более сложные - http://code.google.com/p/googletest/wiki/AdvancedGuide#More_Assertions

== Группы тестов (Test fixtures) ==
При написании групп похожих тестов, которым требуется схожая инициализация ресурсов, можно сделать специальный fixture класс, чтобы избежать дубликции кода:
{{{
#include <gtest/gtest.h>
#include <stdio.h>

class Database {
 public:
  Database() { printf("DB created\n"); }
  ~Database() { printf("DB destroyed\n"); }

  bool Connect() { printf("Connected!\n"); return true; }
  void ReleaseResources() { printf("Released...\n"); }

  void DoSomething() { }
  void DoSomethingElse() { }
};

// A new instance is created for each test case being run.
class DatabaseTest : public ::testing::Test {
 protected:
  virtual void SetUp() {
    ASSERT_TRUE(database_.Connect());
  }

  virtual void TearDown() {
    database_.ReleaseResources();
  }

  Database database_;
};

TEST_F(DatabaseTest, DoSomeStuff) {
  database_.DoSomething();
}

TEST_F(DatabaseTest, DoSomeOtherStuff) {
  database_.DoSomethingElse();
}
--->
[----------] 2 tests from DatabaseTest
[ RUN      ] DatabaseTest.DoSomeStuff
DB created
Connected!
Released...
DB destroyed
[       OK ] DatabaseTest.DoSomeStuff
[ RUN      ] DatabaseTest.DoSomeOtherStuff
DB created
Connected!
Released...
DB destroyed
[       OK ] DatabaseTest.DoSomeOtherStuff
}}}

== Death-тесты ==
Проверяют, что при выполнении указанного выражения программа упадет с определенным сообщением об ошибке:
{{{
#include <gtest/gtest.h>
#include <stdio.h>

int divide(int a, int b) {
  if (b == 0) {
    fprintf(stderr, "Shouldn't divide by zero!\n");
    abort();
  }
  return a / b;
}

TEST(MyFunctionTests, DivideByZeroDeath) {
  ASSERT_DEATH(divide(42, 0), "divide by zero");
}
}}}

== Средства командной строки ==
{{{
$ ./mytest --gtest_list_tests         # перечислить все имена тестов
$ ./mytest --gtest_repeat=1000        # повторить все тесты 1000 раз
$ ./mytest --gtest_break_on_failure   # поставить breakpoint на нарушение assertions
$ ./mytest --gtest_filter="*Small*"   # запустить только тесты, подходящие под заданный фильтр
$ ./mytest --gtest_filter="-*Death*"  # запустить все тесты, за исключением подходящих под заданный фильтр
}}}