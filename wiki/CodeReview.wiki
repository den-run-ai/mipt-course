#summary Как правильно подготовить свой патч для код-ревью и закоммитить
#labels Featured

*Оглавление:*
<wiki:toc max_depth="2" />
----

= Перед тем как начать... =
*Внимательно прочитайте _всю_ страницу перед тем, как делать _что-либо_; в том числе рекомендации в конце.*

Предполагается, что у Вас уже есть SVN клиент и Вы умеете собирать наш проект.<br>Если это не так, [http://code.google.com/p/mipt-course/wiki/Building читайте соответствующую инструкцию].

Убедитесь, что Ваш svn-клиент использует `https://`:
{{{
$ svn info | grep URL  # выполнять в папке SVN-клиента.
URL: https://mipt-course.googlecode.com/svn/trunk
}}}
Если это не так - см. внизу страницы.

Если на строке URL у Вас видно https - читайте далее.

----
= Процесс шаг за шагом =
_Действующие лица - Автор патча и Ревьювер._

== 1. Подготовка патча ==
Автор патча:
  * Убеждается, что его SVN клиент использует протокол https (см выше)<br><br>
  * Если патч делается в рамках семестрового задания - нужно завести bug/issue (далее "тикет" - дабы не было путаницы с _code review issue_).<br><br>
  * [http://code.google.com/p/mipt-course/wiki/SubversionPlayground Делает в SVN клиенте нужные изменения],<br>в том числе `svn add/rm/mv` на новые/удаляемые/переименованные файлы.<br>Особых действий с изменёнными (уже существовавшими в репозитории) файлами делать не надо.<br><br>
  * Проверяет свои файлы на стилистические ошибки при помощи
{{{
./cpplint.py <список всех изменённых файлов>
}}} 
  и исправляет обнаруженные недочеты.

  Также, не мешало бы собрать и запустить все тесты.

== 2. Отправка патча ==
Автор патча:
  * Загружает файлы для code review на сайт codereview.appspot.com :
{{{
# ВАЖНО: Вызывайте данную команду из корневой директории вашего svn клиента, а не из подпапок вроде sandbox/!
./upload.py <список ВСЕХ изменённых файлов>
# Если спросит пароль - ввести GMail-пароль
New issue subject: Я исправил багу такую-то, см. issue 42  # пишете сюда краткое описание патча - что сделано?
}}}
  __*Cкрипт распечатает ссылку на ревью*, например http://codereview.appspot.com/1234567.<br>Число в конце ссылки - номер ревью, его хорошо бы куда-нибудь записать.

  * Открывает страницу ревью, и проверяет, что там оказались именно те файлы и те изменения, которые он хотел совершить<br>(не больше, не меньше! без отладочных printf и т.п.)
  Если Автор понимает, что надо что-то исправить - исправляет и загружает новый патч той же командой, но с дополнительным флагом `i` :
{{{
./upload <список_файлов> -i 1234567
}}}
  (при желании можно создать новый review и удалить старый).
  * По адресу http://codereview.appspot.com/1234567/edit в поле Description указывает:
    * Что собственно сделано, на что смотреть в ревью
    * Ссылку на issue, к которому относится ревью.
    * Если это может быть неочевидно Ревьюверу, то также команды как проверить что делает патч (например, команды CMake+make для проверки изменения в CMakeLists.txt), на какие тесты обратить внимание и т.д.
  * Итак, когда патч проверен самостоятельно, можно отправлять его Ревьюверу.<br>Автор нажимает "*Publish+Mail Comments*" (m)<br>Там указывается e-mail Ревьювера, в поле _Message_ пишется просьба сделать review.<br>По нажатию "*Publish All My Drafts*" - Ревьюверу отправится письмо.<br>// *TODO(timurrrr): кого добавлять в cc*<br><br>

== 3. Собственно, code review ==
  * ~~Наступает ночь, просыпается мафия.~~<br><br>
  * Ревьювер, получив письмо, пишет inline комментарии к патчу и таким же образом (Publish All My Drafts) посылает письмо Автору патча с просьбой исправить то-то и то-то.<br><br>
  * Автор патча исправляет найденные ошибки, снова запускает все тесты, `./cpplint.py` и затем посылает обновлённый патч командой
{{{
./upload.py <список ВСЕХ изменённых файлов> -i 1234567 # Важно указать номер review!
# Даже если какие-то файлы из review не были изменены в новой версии патча по
# сравнению со старой (но отличаются от ревизии HEAD), их все равно надо указать.
}}}
  * Автор патча отвечает на все комментарии Ревьювера (хотя бы "Done") и посылает их ("Publish All My Drafts")<br><br>
  * Ревьювер снова получает письмо, пишет комментарии и т.д. - до тех пор пока патч всех не устравивает.
  * Рекомендуется перед каждым `./upload.py` делать `svn up` и исправить все конфликты локально, чтобы этого не делал Ревьювер, пробуя Ваш патч.

== 4. Review пройден - что дальше? ==
  * Когда Ревьювера всё устраивает - он говорит LGTM (_Looks Good To Me_).<br>_Уточнение: Ревьюверов бывает несколько.<br>В этом случае Автору патча стоит прямым текстом спрашивать,<br>стоит ли ждать LGTM от всех или достаточно одного/двух.<br>Логика обычно такая:<br>Если каждый ревьювер компетентен во всем коде, который ты меняешь - достаточно одного LGTM.<br>Если каждый ревьювер ответственен только за свой кусок - нужно LGTM от всех._<br>
  * Перед commit'ом Автор проверяет, что добавит в репозиторий именно то, что необходимо с помощью
{{{
svn diff <список изменённых файлов> | less  # выйти из леса - q
# Заодно проверьте, что список файлов совпадает с прошедшим ревью.
}}}
  * Автор commit'ит патч в репозиторий командой
{{{
# Обратите внимание - кавычка закрывается только на последней строке; не пропускайте пустую строку!
svn commit <список ВСЕХ изменённых файлов> -m "<Описание изменения>.
Reviewed at http://codereview.appspot.com/1234567

Update issue <номер_тикета>
Сделано то-то и то-то,
следующий шаг - то-то и то-то"
}}}
  или
{{{
svn commit <тот же список изменённых файлов>
# дождаться открытия редактора $SVN_EDITOR и там написать:
<Описание изменения>.
Reviewed at http://codereview.appspot.com/1234567

Update issue <номер_тикета>
Сделано то-то и то-то,
следующий шаг - то-то и то-то
}}}
  Ссылка на review указывается для истории - там видно и кто делал review, и какие вопросы обсуждались, и т.п.

  Благодаря строке `"Update issue XYZ"` в ваш тикет будет автоматически добавлена ссылка на коммит, а также последующий текст.<br>(Пример: см issue 49 vs r470, а также [http://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control документацию]).<br/>*Если SVN спрашивает у Вас пароль, надо ввести не GMail-пароль, а тот, что сгенерирован на странице https://code.google.com/hosting/settings *
== 5. Завершение процесса после коммита ==
  * Через пару минут после коммита *настоятельно рекомендуется* проверить, что данный патч успешно прошел сборку и запуск на [http://ubermipt.com:8080/waterfall билдботе] (а также см e-mail на предмет гневных писем "ааа Вы сломали сборку/тесты!").<br>Если на боте что-то пошло не так (код не компилируется, тесты фейлятся и т.д.) - рекомендую сделать [http://svnbook.red-bean.com/en/1.1/ch04s04.html#svn-ch-4-sect-4.2 откат ревизии]:
{{{
svn up && svn status -q  # убедиться, что в клиенте нет локальных изменений
# Вместо N надо подставить номер "плохой" ревизии, а M=N-1
svn merge -r N:M https://mipt-course.googlecode.com/svn/trunk
svn commit -m "Revert rN - failed on the buildbot"
}}}
  _*_TODO* - этот процесс можно улучшить, сделав на билдботе Commit Queue (см. issue 17)

  * Автор пишет в описании ревью "Закоммитил `http://code.google.com/p/mipt-course/source/detail?r=1234`" и "закрывает" review:<br>_Edit issue (http://codereview.appspot.com/1234567/edit) -> написать Description -> поставить галочку Closed -> Update Issue._<br><br>
  * Если в commit message было указано "update issue XYZ", то стоит проверить что в тикете появилась запись о коммите.<br>Иначе, напишите соответствующий комментарий в тикет самостоятельно.<br>Например, _"ошибка исправлена в ревизии r10", "фича сделана в r5"_ и т.п.<br><br>
  * Настоятельно рекомендуется не удалять review issues - пусть для всех коммитов сохранится история что-кто-кому-писал при review.
----

= Общие рекомендации =
  * Чем меньше патч, тем проще Ревьюверу выполнить свою задачу и тем быстрее проходит ревью.<br>Если есть возможность разбить большой патч на несколько логически завершённых небольших патчей - лучше сразу так и поступить,<br><br>
  * Экономьте время Ревьювера - не стоит посылать недоделанные и плохо форматированные патчи!<br>Перед отправкой патча на review *обязательно* проверьте, что код компилируется и проходит все тесты.<br>Проверьте Code Style с помощью [http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#cpplint cpplint.py].<br>В редких случаях допускается отправлять недоделанный код с явно выраженной в Message просьбой помочь советом/разобраться/доделать.
  * Если Вам непонятно что делать дальше (кажется, что все уже сделали), а Ревьювер не отвечает - напишите ему "Мне нужно еще что-то делать?". Возможно, Вы что-то не поняли или Ревьювер не понял, что ему нужно на что-то посмотреть. 

= Если все-таки SVN клиент настроен на http:// =
_Примечание:
Раньше на сайте были инструкции по checkout как `http://`, так и `https://` версий.
По идее, у студентов 2011-2012 года такой проблемы быть не должно, но на всякий случай сохраняю инструкцию по переносу._

Если Вы по ошибке уже послали на review некий код из клиента с `http://` адресом - не отчаивайтесь, еще не все потеряно!<br>Создайте новый https-клиент и перенесите в него изменения с помощью команд
{{{
svn diff >~/http_client.patch  # Выполнять в http-клиенте
cd ~/my_https_client
patch -p0 -i ~/http_client.patch  # Выполнять в https-клиенте
# или
svn diff ~/my_http_client | patch -p0  # Выполнять в https-клиенте
}}}

Теперь снова сделайте `svn add` для всех добавленных файлов (в https-клиенте)
Проверьте командой `svn status` что SVN знает обо всех Ваших новых файлах, потом проверьте что все собирается - и можно удалять старый `http` клиент.