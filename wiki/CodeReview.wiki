#summary Как правильно подготовить свой патч для код-ревью и закоммитить
#labels Featured

= Перед тем как начать... =
Важно, чтобы Ваш svn-клиент использовал `https://` и через `--username` был указан Ваш GMail-адрес!
{{{
svn checkout https://mipt-course.googlecode.com/svn/trunk/ mipt-course --username my.email@gmail.com
}}}

Если Вы по ошибке уже послали на ревью некий код из клиента с `http://` адресом - не отчаивайтесь!<br/>Создайте новый https-клиент и перенесите в него изменения с помощью команды
{{{
patch -p0 -i <путь к патчу> # Выполнять в https-клиенте
}}}
или
{{{
svn diff <путь к старому клиенту> | patch -p0  # Выполнять в https-клиенте
}}}
Не забудьте снова сделать `svn add` для всех добавляемых файлов в https-клиенте!

= Процесс шаг за шагом =
(две роли - Автор патча и Ревьювер)
  * Автор патча - убеждается, что его SVN клиент использует протокол https (можно проверить командой `svn info` в папке клиента)<br><br>
  * Автор патча - делает в SVN клиенте нужные изменения, в том числе `svn add/rm` на новые/удаляемые файлы.<br><br>
  * Автор создаёт issue для код-ревью
  {{{
  # upload.py можно скачать тут: http://code.google.com/p/rietveld/wiki/UploadPyUsage
  # Не забудьте добавить его в PATH (или положить в /usr/bin )
  #
  # ВАЖНО: Вызывайте данную команду из корневой директории вашего svn клиента, а не из подпапок вроде sandbox/!
  ./upload.py <список всех изменённых файлов>
  }}}
  Скрипт распечатает ссылку на issue, например http://codereview.appspot.com/1234567.

  * Автор открывает issue, и проверяет, что в issue оказались именно те изменения, которые он хотел совершить (не больше, не меньше! без отладочных printf и т.п.)
  Если автор понимает, что обновленную версию патча нужно загрузить заново - в тот же issue заливается новая версия патча - той же командой с дополнительным флагом "`-i 1234567`"<br>(при желании можно создать новый issue и удалить старый).
  * Затем автор нажимает "*Publish+Mail Comments*" (m)<br>Туда добавляется e-mail Ревьювера, пишет просьбу сделать review в поле Message и нажимает "Publish All My Drafts" - Ревьюверу придёт письмо.<br>// *TODO(timurrrr): кого добавлять в cc*<br><br>
  * Ревьювер, получив письмо, пишет inline комментарии к патчу и таким же образом (Publish All My Drafts) посылает письмо Автору патча с просьбой исправить то-то и то-то.<br><br>
  * Автор патча исправляет найденные ошибки и посылает обновлённый патч командой
  {{{
  ./upload.py <список всех изменённых файлов> -i 1234567 # Важно указать номер review issue!
  # Даже если какие-то файлы из review issue не были изменены в новой версии патча по
  # сравнению со старой (но отличаются от ревизии HEAD), их все равно надо указать.
  }}}
  * Автор патча отвечает на все комментарии Ревьювера (хотя бы "Done") и посылает их ("Publish All My Drafts")<br><br>
  * Ревьювер снова получает письмо, пишет комментарии и т.д. - до тех пор пока патч всех не устравивает
  ...
  * Когда Ревьювера всё устраивает - он говорит LGTM (_Looks Good To Me_).<br><br>
  * Автор может отправить патч в репозиторий командой<br>(*Обращаю особое внимание на то, что в комменте к коммиту желательно указать ссылку на review issue - для истории*)
  {{{
  svn commit <тот же список изменённых файлов> -m "<Название review issue>. Reviewed at http://codereview.appspot.com/1234567"
  }}}
  или
  {{{
  svn commit <тот же список изменённых файлов>
  # и указать
  # <Название review issue>. Reviewed at http://codereview.appspot.com/1234567
  # в сообщении коммита через SVN_EDITOR
  }}}
     * *Если SVN спрашивает у Вас пароль, надо ввести не GMail-пароль, а тот, что сгенерирован на странице https://code.google.com/hosting/settings *
  * *После коммита настоятельно рекомендуется проверить, что данный патч успешно прошел сборку и запуск на [http://tinyurl.com/mipt-course-buildbot билдботе]*<br>Если на боте что-то пошло не так (код не компилируется, тесты фейлятся и т.д.) - рекомендую сделать [http://svnbook.red-bean.com/en/1.1/ch04s04.html#svn-ch-4-sect-4.2 откат ревизии].<br><br>*TODO* - процесс можно улучшить, сделав на билдботе:
    * рассылку е-мейлов в случае ошибок - issue 18,
    * commit queue - issue 17

  * Если патч как-то связан с каким-либо bug issue - напишите соответствующий комментарий в bug issue.<br>Например, _"ошибка исправлена в ревизии r10", "фича сделана в r5"_ и т.п.<br><br>
  * Автор может "закрыть" review issue:<br>Edit issue (http://codereview.appspot.com/1234567/edit) -> поставить галочку Closed -> Update Issue.<br><br>
  * Настоятельно рекомендуется не удалять review issues - пусть для всех коммитов сохранится история что-кто-кому-писал при review.

= Общие рекомендации =
  * Чем меньше патч, тем проще Ревьюверу выполнить свою задачу и тем быстрее проходит ревью.<br>Если есть возможность разбить большой патч на несколько логически завершённых небольших патчей - лучше сразу так и поступить,<br><br>
  * Экономьте время Ревьювера - не стоит посылать недоделанные и плохо форматированные патчи!<br>Перед отправкой патча на ревью *обязательно* проверьте, что код компилируется и проходит все тесты.<br>Проверьте Code Style с помощью [http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#cpplint cpplint.py].<br>В редких случаях допускается отправлять недоделанный код с явно выраженной в Message просьбой помочь советом/разобраться/доделать. 