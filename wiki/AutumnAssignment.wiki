#summary Что нужно сделать для зачёта в осеннем семестре
#labels Featured

= Что нужно сделать для зачёта в осеннем семестре =

==Основной (TDD) сценарий==
  # Подготовка
    * Придумать какую-нибудь несложную, но интересную задачу,
    * Согласовать формулировку, [http://code.google.com/p/mipt-course/issues/entry создать для неё issue]
    * Создать svn клиент нашего проекта, научиться компилировать код и запускать тесты - см. [http://code.google.com/p/mipt-course/wiki/Building инструкцию]
  # Работа по [http://en.wikipedia.org/wiki/Test-driven_development TDD]
    * Написать и согласовать use-cases для своей задачи
    * Написать `DISABLED_` тесты и *потом* интерфейс для классов, решающих основной/самый-простой use-case задачи.<br>Рекомендации:
      * Cмотрите чужие файлы в качестве примеров оформления (copyright header, `#include` и т.д.).
      * В понятие интерфейс *не* включается секция `private`, в том числе переменные-члены класса!
      * *С++*: для написания кода создайте в папке `sandbox/` необходимые файлы:<br>`sandbox/x.h`, `sandbox/x.cpp` и `sandbox/x_test.cpp` - для задачи "Х".<br>Можно обойтись без `.h`/`.cpp` файлов, сделав всё в `sandbox/x_test.cpp`.<br>Эти файлы нужно добавить в клиент SVN ([http://code.google.com/p/mipt-course/wiki/SubversionPlayground#Добавление_файла_в_SVN `svn add`]), и в `sandbox/CMakeLists.txt` (см. комментарии в файле).<br>
      * *Python*: см. прошлогодние тесты в папке `pysandbox/`.
      * Если интерфейсов несколько - рекомендуется также подготовить mock'и, чтобы можно было реализовывать интерфейсы независимо.
    * Пройти [http://code.google.com/p/mipt-course/wiki/CodeReview code review], выполнить commit тестов и интерфейсов,
    * Для каждого интерфейса:
      * Реализовать интерфейс в той степени, чтобы прошёл один новый тест; удалить префикс `DISABLED_`.
      * Пройти code review, сделать commit, написать об этом в issue
      * Повторить для ещё одного теста. Если его нет - написать :-)
    * Если интерфейсов несколько - написать тесты, которые показывают что модули могут работать совместно
    * Повторить вышеописанные шаги поочерёдно для остальных use-cases.
  # Оценка
    * Ответить на пару простых вопросов в личной беседе,
    * Не забыть зачётку!
    * Получить зачёт
*Помните: чем раньше начнёте, тем меньше времени займёт review*

===Примеры задач для "основного" сценария===
  * [http://code.google.com/p/mipt-course/issues/list?q=status%3AAvailable "Ничьи" issues]
  * Написать контейнер или классический алгоритм на графах
  * Доделать [http://code.google.com/p/mipt-course/source/detail?r=169 ReliableUdpChannel]
  * Простые игры: шашки, ~~[http://code.google.com/p/mipt-course/issues/detail?id=20 судоку]~~, пятнашки, ...
  * ~~[http://code.google.com/p/mipt-course/issues/detail?id=29 Разбор и вычисление математических выражений]~~
  * ~~[http://code.google.com/p/mipt-course/issues/detail?id=21 FFT]~~
  * Регулярные выражения (см. [http://code.google.com/p/mipt-course/source/browse/trunk/sandbox/pattern_test.cpp sandbox/pattern_test.cpp])
  * In-memory/file SQL-like database
  * Сжатие данных (текстовых, графических, звуковых, и т.д.)
  * <Место для вашей рекламы>

==Альтернативы==
Альтернативные сценарии (writing tests after code, etc) - пишите, обсудим.
Но лучше основной.

===Альтернативный сценарий-1===
  * Смотрите base/, sandbox/
  * Находите так что-то, что недоделано/неправильно/неудобно; например, откровенный баг или плохое [http://code.google.com/p/mipt-course/wiki/Coverage покрытие тестами]
  * [http://code.google.com/p/mipt-course/issues/entry Файлите issue], добавляя в cc автора "плохого" кода и меня
  * Уточняете, что над исправлением/доделыванием того кода сейчас никто не работает
  * Пишете тест, показывающий недоделку/баг
  * Исправляете
*Важное замечание*: вполне может оказаться, что весь код в репозитории идеален и исправлять/доделывать нечего :)