#summary Что нужно сделать для зачёта в осеннем семестре
#labels Featured

= Что нужно сделать для зачёта в осеннем семестре =

Основной (TDD) сценарий:
  # Подготовка
    * Придумать какую-нибудь несложную, но интересную задачу,
    * Согласовать формулировку,
    * Создать svn клиент нашего проекта, научиться компилировать код и запускать тесты - см. [http://code.google.com/p/mipt-course/wiki/Building инструкцию]
  # Работа по [http://en.wikipedia.org/wiki/Test-driven_development TDD]
    * Написать и согласовать use-cases для своей задачи
    * Написать `DISABLED_` тесты и *потом* интерфейс для классов, решающих основной/самый-простой use-case задачи.<br>Если интерфейсов несколько - рекомендуется также подготовить mock'и, чтобы можно было реализовывать интерфейсы независимо. Также, смотрите чужие файлы в качестве примеров хорошего оформления (copyright, `#include` и т.д.).<br><br>*Рекомендации:*
      * С++: для написания кода создайте в папке `sandbox/` необходимые файлы: `sandbox/x.h`, `sandbox/x.cpp` и `sandbox/x_test.cpp` - для задачи "Х" (например, `sandbox/fft.h`, `sandbox/fft.cpp`, `sandbox/fft_test.cpp`).<br>Допускается определять Ваши интерфейсы и их реализацию в файле `sandbox/x_test.cpp`.<br><br>Эти файлы нужно добавить в клиент SVN ([http://code.google.com/p/mipt-course/wiki/SubversionPlayground#Добавление_файла_в_SVN `svn add`]),<br>а затем их мена нужно добавить в `sandbox/CMakeLists.txt` в соответствующие списки (см. файл).<br>
      * Python: см. прошлогодние тесты в папке `pysandbox/`.<br><br>
    * Пройти [http://code.google.com/p/mipt-course/wiki/CodeReview code review], выполнить commit тестов и интерфейсов,
    * Для каждого интерфейса:
      * Реализовать интерфейс в той степени, чтобы прошёл один новый тест; удалить префикс `DISABLED_`.
      * Пройти code review, сделать commit.
      * Повторить для ещё одного теста. Если его нет - написать :-)
    * Если интерфейсов несколько - написать тесты, которые показывают что модули могут работать совместно
    * Повторить вышеописанные шаги поочерёдно для остальных use-cases.
  # Оценка
    * Ответить на пару простых вопросов в личной беседе,
    * Не забыть зачётку!
    * Получить зачёт
*Помните: чем раньше начнёте, тем меньше времени займёт review*

Альтернативные сценарии (writing tests after code, etc) - пишите, обсудим.
Но лучше основной.

==Примеры задач==
  * Написать контейнер или классический алгоритм на графах
  * Доделать [http://code.google.com/p/mipt-course/source/detail?r=169 ReliableUdpChannel]
  * Простые игры: шашки, ~~[http://code.google.com/p/mipt-course/issues/detail?id=20 судоку]~~, пятнашки, ...
  * Разбор и вычисление математических выражений
  * ~~[http://code.google.com/p/mipt-course/issues/detail?id=21 FFT]~~
  * Регулярные выражения (см. [http://code.google.com/p/mipt-course/source/browse/trunk/sandbox/pattern_test.cpp sandbox/pattern_test.cpp])
  * In-memory/file SQL-like database
  * Сжатие данных (текстовых, графических, звуковых, и т.д.)
  * <Место для вашей рекламы>